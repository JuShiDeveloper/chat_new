package com.jushi.muisc.chat.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jushi.muisc.chat.music.localmusic.model.Song;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SONG".
*/
public class SongDao extends AbstractDao<Song, Long> {

    public static final String TABLENAME = "SONG";

    /**
     * Properties of entity Song.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SongId = new Property(1, String.class, "songId", false, "SONG_ID");
        public final static Property SongName = new Property(2, String.class, "songName", false, "SONG_NAME");
        public final static Property SongAuthor = new Property(3, String.class, "songAuthor", false, "SONG_AUTHOR");
        public final static Property SongAlbum = new Property(4, String.class, "songAlbum", false, "SONG_ALBUM");
        public final static Property SongPath = new Property(5, String.class, "songPath", false, "SONG_PATH");
        public final static Property SongImagePath = new Property(6, String.class, "songImagePath", false, "SONG_IMAGE_PATH");
        public final static Property SongSize = new Property(7, String.class, "songSize", false, "SONG_SIZE");
        public final static Property SongDuration = new Property(8, int.class, "songDuration", false, "SONG_DURATION");
        public final static Property LrcPath = new Property(9, String.class, "lrcPath", false, "LRC_PATH");
        public final static Property LastPlayTime = new Property(10, long.class, "lastPlayTime", false, "LAST_PLAY_TIME");
        public final static Property PlayTimes = new Property(11, int.class, "playTimes", false, "PLAY_TIMES");
        public final static Property Favorites = new Property(12, String.class, "favorites", false, "FAVORITES");
    }


    public SongDao(DaoConfig config) {
        super(config);
    }
    
    public SongDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SONG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SONG_ID\" TEXT," + // 1: songId
                "\"SONG_NAME\" TEXT," + // 2: songName
                "\"SONG_AUTHOR\" TEXT," + // 3: songAuthor
                "\"SONG_ALBUM\" TEXT," + // 4: songAlbum
                "\"SONG_PATH\" TEXT," + // 5: songPath
                "\"SONG_IMAGE_PATH\" TEXT," + // 6: songImagePath
                "\"SONG_SIZE\" TEXT," + // 7: songSize
                "\"SONG_DURATION\" INTEGER NOT NULL ," + // 8: songDuration
                "\"LRC_PATH\" TEXT," + // 9: lrcPath
                "\"LAST_PLAY_TIME\" INTEGER NOT NULL ," + // 10: lastPlayTime
                "\"PLAY_TIMES\" INTEGER NOT NULL ," + // 11: playTimes
                "\"FAVORITES\" TEXT);"); // 12: favorites
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SONG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Song entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String songId = entity.getSongId();
        if (songId != null) {
            stmt.bindString(2, songId);
        }
 
        String songName = entity.getSongName();
        if (songName != null) {
            stmt.bindString(3, songName);
        }
 
        String songAuthor = entity.getSongAuthor();
        if (songAuthor != null) {
            stmt.bindString(4, songAuthor);
        }
 
        String songAlbum = entity.getSongAlbum();
        if (songAlbum != null) {
            stmt.bindString(5, songAlbum);
        }
 
        String songPath = entity.getSongPath();
        if (songPath != null) {
            stmt.bindString(6, songPath);
        }
 
        String songImagePath = entity.getSongImagePath();
        if (songImagePath != null) {
            stmt.bindString(7, songImagePath);
        }
 
        String songSize = entity.getSongSize();
        if (songSize != null) {
            stmt.bindString(8, songSize);
        }
        stmt.bindLong(9, entity.getSongDuration());
 
        String lrcPath = entity.getLrcPath();
        if (lrcPath != null) {
            stmt.bindString(10, lrcPath);
        }
        stmt.bindLong(11, entity.getLastPlayTime());
        stmt.bindLong(12, entity.getPlayTimes());
 
        String favorites = entity.getFavorites();
        if (favorites != null) {
            stmt.bindString(13, favorites);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Song entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String songId = entity.getSongId();
        if (songId != null) {
            stmt.bindString(2, songId);
        }
 
        String songName = entity.getSongName();
        if (songName != null) {
            stmt.bindString(3, songName);
        }
 
        String songAuthor = entity.getSongAuthor();
        if (songAuthor != null) {
            stmt.bindString(4, songAuthor);
        }
 
        String songAlbum = entity.getSongAlbum();
        if (songAlbum != null) {
            stmt.bindString(5, songAlbum);
        }
 
        String songPath = entity.getSongPath();
        if (songPath != null) {
            stmt.bindString(6, songPath);
        }
 
        String songImagePath = entity.getSongImagePath();
        if (songImagePath != null) {
            stmt.bindString(7, songImagePath);
        }
 
        String songSize = entity.getSongSize();
        if (songSize != null) {
            stmt.bindString(8, songSize);
        }
        stmt.bindLong(9, entity.getSongDuration());
 
        String lrcPath = entity.getLrcPath();
        if (lrcPath != null) {
            stmt.bindString(10, lrcPath);
        }
        stmt.bindLong(11, entity.getLastPlayTime());
        stmt.bindLong(12, entity.getPlayTimes());
 
        String favorites = entity.getFavorites();
        if (favorites != null) {
            stmt.bindString(13, favorites);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Song readEntity(Cursor cursor, int offset) {
        Song entity = new Song( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // songId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // songName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // songAuthor
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // songAlbum
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // songPath
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // songImagePath
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // songSize
            cursor.getInt(offset + 8), // songDuration
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // lrcPath
            cursor.getLong(offset + 10), // lastPlayTime
            cursor.getInt(offset + 11), // playTimes
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // favorites
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Song entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSongId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSongName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSongAuthor(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSongAlbum(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSongPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSongImagePath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSongSize(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSongDuration(cursor.getInt(offset + 8));
        entity.setLrcPath(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLastPlayTime(cursor.getLong(offset + 10));
        entity.setPlayTimes(cursor.getInt(offset + 11));
        entity.setFavorites(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Song entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Song entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Song entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
